<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- JDBC属性文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${jdbc.mysql.driver}" />
        <property name="url" value="${jdbc.mysql.jdbcUrl}" />
        <property name="username" value="${jdbc.mysql.username}" />
        <property name="password" value="${jdbc.mysql.password}" />
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="5" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="800" />
        <!-- 最大空闲连接数 -->
        <property name="maxIdle" value="100" />
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="30" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true" />
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="500" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="true" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="false" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
                监控统计用的filter:stat
                日志用的filter:log4j
               防御SQL注入的filter:wall -->
        <property name="filters" value="stat" />
    </bean>

    <!--<bean id="writeDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
        <!--&lt;!&ndash; 数据库基本信息配置 &ndash;&gt;-->
        <!--<property name="driverClassName" value="${jdbc.postgresql.driver}" />-->
        <!--<property name="url" value="${jdbc.postgresql.jdbcUrl}" />-->
        <!--<property name="username" value="${jdbc.postgresql.username}" />-->
        <!--<property name="password" value="${jdbc.postgresql.password}" />-->
        <!--&lt;!&ndash; 初始化连接数量 &ndash;&gt;-->
        <!--<property name="initialSize" value="5" />-->
        <!--&lt;!&ndash; 最大并发连接数 &ndash;&gt;-->
        <!--<property name="maxActive" value="800" />-->
        <!--&lt;!&ndash; 最大空闲连接数 &ndash;&gt;-->
        <!--<property name="maxIdle" value="100" />-->
        <!--&lt;!&ndash; 最小空闲连接数 &ndash;&gt;-->
        <!--<property name="minIdle" value="30" />-->
        <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="60000" />-->
        <!--&lt;!&ndash; 超过时间限制是否回收 &ndash;&gt;-->
        <!--<property name="removeAbandoned" value="true" />-->
        <!--&lt;!&ndash; 超过时间限制多长； &ndash;&gt;-->
        <!--<property name="removeAbandonedTimeout" value="500" />-->
        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="300000" />-->
        <!--&lt;!&ndash; 申请连接的时候检测 &ndash;&gt;-->
        <!--<property name="testWhileIdle" value="true" />-->
        <!--&lt;!&ndash; 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 &ndash;&gt;-->
        <!--<property name="testOnBorrow" value="false" />-->
        <!--&lt;!&ndash; 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  &ndash;&gt;-->
        <!--<property name="testOnReturn" value="false" />-->
        <!--&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;-->
        <!--<property name="poolPreparedStatements" value="true" />-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />-->
        <!--&lt;!&ndash;属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：-->
                <!--监控统计用的filter:stat-->
                <!--日志用的filter:log4j-->
               <!--防御SQL注入的filter:wall &ndash;&gt;-->
        <!--<property name="filters" value="stat" />-->
    <!--</bean>-->

    <!--<bean id="dataSource" class="com.yangzhao.datasources.DynamicDataSource">-->
        <!--<property name="targetDataSources">-->
            <!--<map key-type="java.lang.String">-->
                 <!--&lt;!&ndash; 指定lookupKey和与之对应的数据源 &ndash;&gt;-->
                 <!--<entry key="readDataSource" value-ref="readDataSource"></entry>-->
                 <!--<entry key="writeDataSource" value-ref="writeDataSource"></entry>-->
             <!--</map>-->
         <!--</property>-->
         <!--&lt;!&ndash; 这里可以指定默认的数据源 &ndash;&gt;-->
         <!--<property name="defaultTargetDataSource" ref="readDataSource" />-->
    <!--</bean>-->

    <bean id="dataSourceExchangeBean" class="com.yangzhao.aop.DataSourceExchange"></bean>

    <!-- 申明spring对@AspectJ的支持 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

</beans>